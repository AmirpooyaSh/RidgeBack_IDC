// Generated by gencpp from file puma_motor_msgs/MultiFeedback.msg
// DO NOT EDIT!


#ifndef PUMA_MOTOR_MSGS_MESSAGE_MULTIFEEDBACK_H
#define PUMA_MOTOR_MSGS_MESSAGE_MULTIFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <puma_motor_msgs/Feedback.h>

namespace puma_motor_msgs
{
template <class ContainerAllocator>
struct MultiFeedback_
{
  typedef MultiFeedback_<ContainerAllocator> Type;

  MultiFeedback_()
    : header()
    , drivers_feedback()  {
    }
  MultiFeedback_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , drivers_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::puma_motor_msgs::Feedback_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::puma_motor_msgs::Feedback_<ContainerAllocator> >> _drivers_feedback_type;
  _drivers_feedback_type drivers_feedback;





  typedef boost::shared_ptr< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MultiFeedback_

typedef ::puma_motor_msgs::MultiFeedback_<std::allocator<void> > MultiFeedback;

typedef boost::shared_ptr< ::puma_motor_msgs::MultiFeedback > MultiFeedbackPtr;
typedef boost::shared_ptr< ::puma_motor_msgs::MultiFeedback const> MultiFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator1> & lhs, const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.drivers_feedback == rhs.drivers_feedback;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator1> & lhs, const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace puma_motor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "85bac0c3867f66b345e907ea2081c354";
  }

  static const char* value(const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x85bac0c3867f66b3ULL;
  static const uint64_t static_value2 = 0x45e907ea2081c354ULL;
};

template<class ContainerAllocator>
struct DataType< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "puma_motor_msgs/MultiFeedback";
  }

  static const char* value(const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"puma_motor_msgs/Feedback[] drivers_feedback\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: puma_motor_msgs/Feedback\n"
"# Number on the bus (CAN ID).\n"
"uint8 device_number\n"
"\n"
"# Name of joint controlled, or other identifier.\n"
"string device_name\n"
"\n"
"# Duty cycle of the h-bridge driver (-1..1).\n"
"float32 duty_cycle\n"
"\n"
"# Current consumed (amps).\n"
"float32 current\n"
"\n"
"# Travel as measured by the encoder (rad).\n"
"float64 travel\n"
"\n"
"# Angular velocity as measured by the encoder (rad/s).\n"
"float64 speed\n"
"\n"
"# The reported setpoint value of the on-board controller for the given mode.\n"
"# In voltage control, duty cycle of the h-bridge driver (-1..1).\n"
"# In speed control, angular velocity setpoint of the on-board controller (rad/s).\n"
"# In position control, travel as measured by the encoder (rad).\n"
"# In current control, the current consumed (amps).\n"
"float64 setpoint\n"
;
  }

  static const char* value(const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.drivers_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::puma_motor_msgs::MultiFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::puma_motor_msgs::MultiFeedback_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "drivers_feedback[]" << std::endl;
    for (size_t i = 0; i < v.drivers_feedback.size(); ++i)
    {
      s << indent << "  drivers_feedback[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::puma_motor_msgs::Feedback_<ContainerAllocator> >::stream(s, indent + "    ", v.drivers_feedback[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUMA_MOTOR_MSGS_MESSAGE_MULTIFEEDBACK_H
