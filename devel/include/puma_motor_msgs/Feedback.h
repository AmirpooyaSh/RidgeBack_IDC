// Generated by gencpp from file puma_motor_msgs/Feedback.msg
// DO NOT EDIT!


#ifndef PUMA_MOTOR_MSGS_MESSAGE_FEEDBACK_H
#define PUMA_MOTOR_MSGS_MESSAGE_FEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace puma_motor_msgs
{
template <class ContainerAllocator>
struct Feedback_
{
  typedef Feedback_<ContainerAllocator> Type;

  Feedback_()
    : device_number(0)
    , device_name()
    , duty_cycle(0.0)
    , current(0.0)
    , travel(0.0)
    , speed(0.0)
    , setpoint(0.0)  {
    }
  Feedback_(const ContainerAllocator& _alloc)
    : device_number(0)
    , device_name(_alloc)
    , duty_cycle(0.0)
    , current(0.0)
    , travel(0.0)
    , speed(0.0)
    , setpoint(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _device_number_type;
  _device_number_type device_number;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _device_name_type;
  _device_name_type device_name;

   typedef float _duty_cycle_type;
  _duty_cycle_type duty_cycle;

   typedef float _current_type;
  _current_type current;

   typedef double _travel_type;
  _travel_type travel;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _setpoint_type;
  _setpoint_type setpoint;





  typedef boost::shared_ptr< ::puma_motor_msgs::Feedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::puma_motor_msgs::Feedback_<ContainerAllocator> const> ConstPtr;

}; // struct Feedback_

typedef ::puma_motor_msgs::Feedback_<std::allocator<void> > Feedback;

typedef boost::shared_ptr< ::puma_motor_msgs::Feedback > FeedbackPtr;
typedef boost::shared_ptr< ::puma_motor_msgs::Feedback const> FeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::puma_motor_msgs::Feedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::puma_motor_msgs::Feedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::puma_motor_msgs::Feedback_<ContainerAllocator1> & lhs, const ::puma_motor_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return lhs.device_number == rhs.device_number &&
    lhs.device_name == rhs.device_name &&
    lhs.duty_cycle == rhs.duty_cycle &&
    lhs.current == rhs.current &&
    lhs.travel == rhs.travel &&
    lhs.speed == rhs.speed &&
    lhs.setpoint == rhs.setpoint;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::puma_motor_msgs::Feedback_<ContainerAllocator1> & lhs, const ::puma_motor_msgs::Feedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace puma_motor_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::puma_motor_msgs::Feedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::puma_motor_msgs::Feedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::puma_motor_msgs::Feedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "84395259b34088c5160a95e5fe354848";
  }

  static const char* value(const ::puma_motor_msgs::Feedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x84395259b34088c5ULL;
  static const uint64_t static_value2 = 0x160a95e5fe354848ULL;
};

template<class ContainerAllocator>
struct DataType< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "puma_motor_msgs/Feedback";
  }

  static const char* value(const ::puma_motor_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Number on the bus (CAN ID).\n"
"uint8 device_number\n"
"\n"
"# Name of joint controlled, or other identifier.\n"
"string device_name\n"
"\n"
"# Duty cycle of the h-bridge driver (-1..1).\n"
"float32 duty_cycle\n"
"\n"
"# Current consumed (amps).\n"
"float32 current\n"
"\n"
"# Travel as measured by the encoder (rad).\n"
"float64 travel\n"
"\n"
"# Angular velocity as measured by the encoder (rad/s).\n"
"float64 speed\n"
"\n"
"# The reported setpoint value of the on-board controller for the given mode.\n"
"# In voltage control, duty cycle of the h-bridge driver (-1..1).\n"
"# In speed control, angular velocity setpoint of the on-board controller (rad/s).\n"
"# In position control, travel as measured by the encoder (rad).\n"
"# In current control, the current consumed (amps).\n"
"float64 setpoint\n"
;
  }

  static const char* value(const ::puma_motor_msgs::Feedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_number);
      stream.next(m.device_name);
      stream.next(m.duty_cycle);
      stream.next(m.current);
      stream.next(m.travel);
      stream.next(m.speed);
      stream.next(m.setpoint);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Feedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::puma_motor_msgs::Feedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::puma_motor_msgs::Feedback_<ContainerAllocator>& v)
  {
    s << indent << "device_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_number);
    s << indent << "device_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.device_name);
    s << indent << "duty_cycle: ";
    Printer<float>::stream(s, indent + "  ", v.duty_cycle);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "travel: ";
    Printer<double>::stream(s, indent + "  ", v.travel);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "setpoint: ";
    Printer<double>::stream(s, indent + "  ", v.setpoint);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUMA_MOTOR_MSGS_MESSAGE_FEEDBACK_H
